// <auto-generated />
using ComicBookReader.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComicBookReader.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220420183633_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AuthorComicBook", b =>
                {
                    b.Property<int>("AuthorsAuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ComicBooksComicBookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsAuthorId", "ComicBooksComicBookId");

                    b.HasIndex("ComicBooksComicBookId");

                    b.ToTable("AuthorComicBook");
                });

            modelBuilder.Entity("ComicBookGenre", b =>
                {
                    b.Property<int>("ComicBooksComicBookId")
                        .HasColumnType("int");

                    b.Property<int>("GenresGenreId")
                        .HasColumnType("int");

                    b.HasKey("ComicBooksComicBookId", "GenresGenreId");

                    b.HasIndex("GenresGenreId");

                    b.ToTable("ComicBookGenre");
                });

            modelBuilder.Entity("ComicBookReader.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuthorBirthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ComicBookReader.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChapterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComicBookId")
                        .HasColumnType("int");

                    b.HasKey("ChapterId");

                    b.HasIndex("ComicBookId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("ComicBookReader.Models.ComicBook", b =>
                {
                    b.Property<int>("ComicBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ComicBookCover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComicBookDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComicBookLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComicBookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComicBookYear")
                        .HasColumnType("int");

                    b.HasKey("ComicBookId");

                    b.ToTable("ComicBooks");
                });

            modelBuilder.Entity("ComicBookReader.Models.ComicBook_User", b =>
                {
                    b.Property<int>("ComicBookId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ComicBookMark")
                        .HasColumnType("int");

                    b.Property<string>("ComicBookReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<int>("LastPage")
                        .HasColumnType("int");

                    b.Property<string>("ReadingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComicBookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ComicBook_Users");
                });

            modelBuilder.Entity("ComicBookReader.Models.ComicPage", b =>
                {
                    b.Property<int>("ComicPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("PageImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTranslatedImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComicPageId");

                    b.HasIndex("ChapterId");

                    b.ToTable("ComicPages");
                });

            modelBuilder.Entity("ComicBookReader.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ComicBookReader.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuthorComicBook", b =>
                {
                    b.HasOne("ComicBookReader.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicBookReader.Models.ComicBook", null)
                        .WithMany()
                        .HasForeignKey("ComicBooksComicBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComicBookGenre", b =>
                {
                    b.HasOne("ComicBookReader.Models.ComicBook", null)
                        .WithMany()
                        .HasForeignKey("ComicBooksComicBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicBookReader.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComicBookReader.Models.Chapter", b =>
                {
                    b.HasOne("ComicBookReader.Models.ComicBook", "ComicBook")
                        .WithMany("Chapters")
                        .HasForeignKey("ComicBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicBook");
                });

            modelBuilder.Entity("ComicBookReader.Models.ComicBook_User", b =>
                {
                    b.HasOne("ComicBookReader.Models.ComicBook", "ComicBook")
                        .WithMany("ComicBookUsers")
                        .HasForeignKey("ComicBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicBookReader.Models.User", "User")
                        .WithMany("ComicBookUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicBook");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicBookReader.Models.ComicPage", b =>
                {
                    b.HasOne("ComicBookReader.Models.Chapter", "Chapter")
                        .WithMany("ComicPages")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ComicBookReader.Models.Chapter", b =>
                {
                    b.Navigation("ComicPages");
                });

            modelBuilder.Entity("ComicBookReader.Models.ComicBook", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("ComicBookUsers");
                });

            modelBuilder.Entity("ComicBookReader.Models.User", b =>
                {
                    b.Navigation("ComicBookUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
