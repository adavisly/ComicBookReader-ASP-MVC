ОГЛАВЛЕНИЕ

ВВЕДЕНИЕ	3
ЗАДАНИЕ	3
ЛИСТ НОРМОКОНТРОЛЕРА	4
1.	РАЗРАБОТКА ПРОЕКТА ВЕБ-ПРИЛОЖЕНИЯ	6
1.1.    Исследование предметной области	6
1.2.    Функциональные требования	6
1.3.    Нефункциональные требования	7
1.4.    Существующие аналоги системы	7
1.5.    Mind-карта системы	8
1.6.    Макеты системы	10
1.7.    Логическое проектирование базы данных	16
2.	РАЗРАБОТКА ВЕБ-ПРИЛОЖЕНИЯ	18
2.1.    Инструменты разработки	18
2.2.    Создание моделей	20
2.3.    Создание контроллеров	25
2.4.    Создание представлений	33
2.5.    Распознавание изображений	39
ЗАКЛЮЧЕНИЕ	46
СПИСОК ЛИТЕРАТУРЫ	47

 
ВВЕДЕНИЕ

В последнее время комиксы становятся все популярнее в мире, а люди все чаще используют веб-приложения для их чтения. Также очень популярны комиксы, выходящие на иностранных языках, однако перевод произведений на родной язык выходит через некоторое время. Чтобы людям не приходилось ждать перевод, было создано веб-приложение, позволяющее читать комикс и распознавать текст с изображения, что позволит в дальнейшем перевести его на родной язык с помощью машинного перевода.
Цель данной работы – разработать веб-приложение для чтения комиксов и реализовать функцию распознавания текста с изображений.
Для достижения этой цели необходимо выполнить следующий перечень задач:
1.	Анализ предметной области;
2.	Определение функциональных и нефункциональных требований к системе;
3.	Построение макетов системы;
4.	Создание базы данных;
5.	Разработка клиентской и серверной частей веб-приложения 
1.	РАЗРАБОТКА ПРОЕКТА ВЕБ-ПРИЛОЖЕНИЯ

1.1.    Исследование предметной области

Предметной областью веб-приложения для чтения комиксов является хранилище графических романов.
Для людей, увлекающихся комиксами, необходимо приложение, отображающее их список, позволяющее их читать и просматривать о них информацию. К информации о комиксах относятся их название, жанры, авторы, главы, обложка, описание, год выхода, язык текста и сами изображения страниц. Также пользователь сможет добавлять комикс в один из списков для чтения: «читаю», «прочитано» или «хочу прочитать», добавлять в категорию любимых, оставлять отзыв и ставить оценку от одного до пяти. 
Для удобства пользователей необходимо предусмотреть поиск по названию, а также фильтрацию комиксов по жанрам, языкам и сортировку по дате выхода, названию или средней оценке читателей.

1.2.    Функциональные требования

Для данной информационной системы были выделены следующие функциональные требования:
•	Аутентификация и авторизация пользователя;
•	Чтение комиксов;
•	Возможность оставлять отзывы;
•	Добавление в список для чтения;
•	Распознавание текста с изображений.
При чтении комикса пользователь сможет менять размер изображения с помощью ползунка, выбрать режим чтения: горизонтальный либо вертикальный. При горизонтальном режиме чтения будет отображаться одна страница комикса, а пользователь сможет переключаться между страницами с помощью кнопок со стрелками либо с помощью клавиатуры.
Немаловажной является функция распознавания текста. С ее помощью пользователь сможет выделить конкретный участок изображения, программа распознает текст, находящийся на выделенном участке и выведет его на экран. Также отдельно будет выводиться лишь выделенный фрагмент изображения.

1.3.    Нефункциональные требования

В данном проекте имеются следующие нефункциональные требования:
•	дружественный интерфейс;
•	привлекательный дизайн, соответствующий ожиданиям целевой аудитории;
•	легкость в навигации;
•	легкость в использовании;
•	ограничение между пользовательским интерфейсом и серверной части. 

1.4.    Существующие аналоги системы

Существует большое количество аналогов приложений для чтения комиксов, в которых реализовано множество полезных функций. К примеру, в таком приложении, как MangaLib, есть возможность оставлять комментарии под каждой страницей, как продемонстрировано на рисунке 1.1. 

Рисунок 1.1 – Обзор приложения MangaLib 
А в приложении WebToon, как показано на рисунке 1.2, пользователь может сам загружать комиксы на сервер. 

Рисунок 1.2 – Обзор приложения WebToon
Однако ни в одном из них нет функции распознавания текста с изображения, которая даст возможность переводить текст с иностранного языка на родной. Поэтому выбранная тема проекта является актуальной на сегодняшний день.

1.5.    Mind-карта системы

На рисунке 1.3 представлена mind-карта разрабатываемой системы. Сайт состоит из шести страниц, каждая из которых имеет навигационный блок и основной контент. На главной странице отображается список комиксов, который можно отфильтровать по жанрам и языкам, а также отсортировать по дате выхода, названию и средней оценке. На странице «Вход» или «Регистрация» располагаются формы –  для входа в систему и для регистрации новых пользователей соответственно. На странице «Профиль» пользователь может просмотреть личные данные и изменить их. Также там отображаются комиксы, добавленные в один списков для чтения – «Читаю», «Прочитано», «Хочу прочитать», «Любимое», а также отображаются все отзывы данного пользователя. На странице «Комикс» имеется информация о комиксе, главы и отзывы. На странице «Чтение» расположены навигация по комиксу, настройки читалки и сами страницы комикса. Также имеется страница «Распознавание» для распознавания текста.  

Рисунок 1.3 – Mind-карта системы
1.6.    Макеты системы

С помощью приложения “Photoshop” были построены макеты системы.
На каждой странице сайта имеется навигационная панель и основной контент. В навигационную панель входят логотип, название сайта, строка поиска и кнопка для перехода на страницу пользователя. При нажатии на логотип открывается главная страница.
На главной странице, как показано на рисунке 1.4, отображается список комиксов в порядке дате выхода по убыванию. Также имеется строка поиска с фильтрами по жанрам, языку и сортировка по дате выхода, названию и оценке пользователей. 

Рисунок 1.4 – Макет главной страницы
На странице комикса в соответствии с рисунком 1.5 располагается такая информация о комиксе, как обложка, название, год выхода, список авторов и жанров, описание. Справа располагается информация о средней оценке пользователей и общее количество оценок. Там же находятся кнопки «Добавить в любимые» и «Оставить отзыв». При нажатии на последнюю, как показано на рисунке 1.6, открывается модальное окно с формой для отправки отзыва. Следом идет форма для добавления в один из списков: «Хочу прочитать», «Читаю» и «Прочитано». 
Ниже располагается список глав со ссылкой на конкретную главу, а нажатии на кнопку «Отзывы» отображаются все отзывы, оставленные пользователями на данный комикс.

Рисунок 1.5 – Макет страницы комикса

Рисунок 1.6 – Модальное окно с формой для отправки отзыва
Страница чтения комикса открывается при нажатии на ссылку с определенной главой. Как показано на рисунке 1.4, она имеет дополнительную навигационную панель для перехода на другую главу или другую страницу либо для возвращения на страницу комикса. Также имеется кнопка настроек, при нажатии на которые открывается окно с настройками размера изображения и режима чтения.

Рисунок 1.7 – Макет страницы чтения комикса
Под каждой страницей комикса имеется кнопка «Распознать», при нажатии на которую открывается страница с распознаванием. В соответствии с рисунком 1.8 пользователь имеет возможность выделить конкретный участок изображения, тогда в окне появится распознанный текст, а также выведется окошко с выделенным фрагментом.

Рисунок 1.8 – Макет страницы распознавания
На странице входа, согласно рисунку 1.9, запрашивается e-mail и пароль пользователя. При нажатии на кнопку «Войти» происходит переход на страницу профиля пользователя. А при нажатии на кнопку «Зарегистрироваться» открывается страница регистрации.

Рисунок 1.9 – Макет страницы «Вход»
На странице регистрации, как показано на рисунке 1.10, запрашивается имя, фамилия, e-mail, пароль и подтверждение пароля. При отсутствии заполнения обязательных полей будет выводиться ошибка с просьбой заполнить данное поле. При нажатии на кнопку «Зарегистрироваться» происходит регистрация пользователя в системе и переход на страницу его профиля. А при нажатии на кнопку «Войти» откроется страница входа в систему.

Рисунок 1.10 – Макет страницы «Регистрация»
На странице профиля в соответствии с рисунком 1.11 находится блок с личными данными пользователя, которые можно изменить при нажатии на кнопку «Изменить информацию». Как показано на рисунке 1.12, откроется модальное окно для изменения информации. В нем можно добавить фото профиля, изменить имя, фамилию, e-mail и обновить пароль. Для последнего потребуется ввести предыдущий пароль для подтверждения личности пользователя. Также на странице отображаются комиксы, добавленные в один из списков для чтения и все оставленные им отзывы. 

Рисунок 1.11 – Макет страницы «Профиль»

Рисунок 1.12 – Макет модального окна для изменения информации

1.7.    Логическое проектирование базы данных

Как показано на рисунке 1.13, была спроектирована логическая модель базы данных. Всего имеется семь сущностей:
•	Комиксы
•	Жанры
•	Авторы
•	Главы
•	Страницы
•	Пользователи
•	Комикс_Пользователь

Рисунок 1.13 – ER-модель базы данных
Сущность «Комиксы» содержит в себе информацию о комиксах и имеет такие атрибуты, как код комикса, название, обложка, описание, год выхода и язык текста.
Сущность «Жанры» содержит в себе информацию о жанрах и имеет такие атрибуты, как код жанра и его название. Она связана с сущностью «Комиксы» отношением «Многие ко многим».
Сущность «Авторы» содержит в себе информацию об авторах и имеет такие атрибуты, как код автора, его имя, дата рождения и фото. Она связана с сущностью «Комиксы» отношением «Многие ко многим».
Сущность «Главы» содержит в себе информацию о главах и имеет такие атрибуты, как код главы и ее название. Она связана с сущностью «Комиксы» отношением «Один ко многим».
Сущность «Страницы» содержит в себе информацию о страницах и имеет такие атрибуты, как код страницы, ее номер и изображение. Она связана с сущностью «Главы» отношением «Один ко многим».
Сущность «Пользователи» содержит в себе информацию о пользователях и имеет такие атрибуты, как код пользователя, его имя, фамилия, e-mail, пароль и фото профиля.
Сущность «Комикс_Пользователь» является промежуточной, содержит в себе информацию о конкретном пользователе и комиксе и имеет такие атрибуты, как код комикса, код пользователя, является ли комикс любимым, статус чтения, отзыв, оценка, последняя страница и последняя глава. Она связана с сущностями «Комиксы» и «Пользователи» отношением «Один ко многим».






 
2.	РАЗРАБОТКА ВЕБ-ПРИЛОЖЕНИЯ

2.1.    Инструменты разработки
	
Веб-приложение было разработано на платформе ASP.NET Core MVC. 
Паттерн MVC подразумевает деление системы на три компонента:
•	Модель (model): описывает применяемые в системе данные и логику, которая сопряжена с ними напрямую. Обычно их объекты хранятся в базе данных. Модели презентованы двумя главными видами: модели представлений и модели домена. Первые нужны для того, чтобы представления могли передавать и отображать данные, а вторые для того, чтобы описывать логику обработки данных. 
•	Представление (view): соответствует визуалу или пользовательскому интерфейсу, зачастую это html-страница, посредством которой пользователь пользуется системой. Кроме того, представление имеет логику, связанную с отражением данных. Однако в представление нельзя включать обработку запроса или изменение данных.
•	Контроллер (controller): предполагает главный компонент MVC, который гарантирует связь между пользователем и сервером, то есть представлением и моделью. Он включает логику обработки запроса пользователя. Контроллер принимает на вход данные пользователя и занимается их обработкой. И в зависимости от ее результатов посылает пользователю конкретный ответ.
Отношения между компонентами паттерна можно описать схемой на рисунке 2.1:

Рисунок 2.1 – Схема паттерна MVC
	В качестве системы управления базами данных был использован MS SQL Server, а в качестве ORM (объектно-реляционного отображения) – Entity Framework Core.
При разработке клиентской части веб-приложения использовались следующие инструменты:
•	HTML (HyperText Markup Language) – стандартизированный язык разметки документов в интернете. Язык HTML интерпретируется браузерами; полученный в результате интерпретации форматированный текст отображается на экране монитора компьютера или мобильного устройства. HTML состоит из ряда элементов, которые используются, чтобы вкладывать или оборачивать различные части контента, чтобы заставить контент отображаться или действовать определённым образом.
•	CSS (Cascading Style Sheets) – формальный язык описания внешнего вида документа (веб-страницы), написанного с использованием языка разметки. В отличие от HTML, который служит для определения структуры и семантики содержимого, CSS отвечает за его внешний вид и отображение. К примеру, с помощью CSS можно изменять шрифт, цвет, размер, межстрочный интервал, разделять содержимое на колонки, а также добавлять анимацию и другие декоративные элементы.
•	JavaScript – это язык программирования, который даёт возможность реализовывать сложное поведение веб-страницы. Веб-страница может не только отображать статическое содержимое, но и своевременно показывать обновление контента, выводить интерактивные карты, 2D/3D анимацию, прокручивать видео и т.д.
Для распознавания текста с изображений был использован движок OCR Tesseractи уже обученные модели, а также библиотека для обработки изображений EmguCV.

2.2.    Создание моделей

При создании проекта ASP.NET Core с паттерном MVC в нем автоматически создаются нужные папки для моделей, контроллеров и представлений. Для создания моделей нужно поместить в папку Models классы, соответствующие названиям сущностей базы данных. Таким образом, как показано на рисунке 2.2, был создан класс ComicBook, имеющий свойства:
•	ComicBookId – код комикса, имеющий тип integer и являющийся первичным ключом;
•	ComicBookTitle – название комикса, имеющее тип string;
•	ComicBookLanguage – язык текста комикса, имеющий тип string;
•	ComicBookCover – обложка комикса, имеющая тип string;
•	ComicBookDescription – описание комикса, имеющее тип string;
•	ComicBookYear – год выхода комикса, имеющий тип integer;
•	ComicBookUsers – свойство, имеющее тип List<ComicBook_User>, показывающее отношение «Один ко многим» данной сущности к сущности «Комикс_Пользователь»; 
•	Authors – свойство, имеющее тип List<Author>, показывающее отношение «Многие ко многим» данной сущности к сущности «Авторы»; 
•	Genres – свойство, имеющее тип List<Genres>, показывающее отношение «Многие ко многим» данной сущности к сущности «Жанры»;
•	Chapters – свойство, имеющее тип List<Chapters>, показывающее отношение «Один ко многим» данной сущности к сущности «Главы»;

Рисунок 2.2 – Создание модели ComicBook
Подобным образом, как показано на рисунках, были созданы остальные модели приложения. 

Рисунок 2.3 – Создание модели Author

Рисунок 2.4 – Создание модели Chapter

Рисунок 2.5 – Создание модели ComicPage

Рисунок 2.6 – Создание модели Genre

Рисунок 2.7 – Создание модели User

Рисунок 2.8 – Создание модели ComicBook_User
	Далее, согласно рисунку 2.9, был создан класс-контекст AppDBContext, унаследованный от класса DbContext. В нем создаются свойства, имеющие тип DbSet<T>. В качестве T указываются названия созданных моделей. Данные свойства помогают получать из базы набор данных определенного типа. Так как по умолчанию база данных отсутствует, то в конструктор класса AppDBContext вызывается метод Database.EnsureCreated(), чтобы база данных была создана.
Рисунок 2.9 – Создание класса AppDBContext
	В методе OnModelCreating() описываются первичные ключи сущностей, а также добавляются нужные значения по умолчанию, в данном случае это фото  профиля пользователя.

Рисунок 2.10 – Метод OnModelCreating()
	В соответствии с рисунком 2.11 был создан класс InitialData, в котором имеется метод Initialize, принимающий на вход контекст и предназначенный для заполнения базы начальными данными. Таким образом, при запуске программы эти данные внесутся в базу.


Рисунок 2.11 – Внесение начальных данных в базу

2.3.    Создание контроллеров

В проекте было имеется два контроллера – HomeController и AccountController. Первый предназначен для работы с главной страницей, страницей с комиксом, страницей для чтения и распознавания, а второй – для работы со страницами входа, регистрации и профиля пользователя.
Как показано на рисунке 2.12, класс наследуется от класса Controller. Также в нем создается конструктор, передающий контекст базы данных для работы с ней.

Рисунок 2.12 – Создание HomeController
Затем, согласно рисунку 2.13, был создан метод ComicBook, принимающий на вход id комикса, возвращающий тип IActionResult. Это означает, что данный метод является действием. В нем был создан список cb_users с типом ComicBook_User, которому с помощью LINQ-запросов передаются все значения сущности ComicBook_Users, где ComicBookId равен id текущего комикса. Далее этот список присваивается переменной ViewBag.CB_Users, позволяющей передавать объекты из контроллеров в представления.
Затем был создан экземпляр класса ComicBook, которому присваивается комикс с нужным id. Данное действие осуществляется с помощью метода Find(). После этому экземпляру класса присваиваются нужные главы, авторы и жанры. Метод возвращает представление, в которое передана модель текущего комикса.

Рисунок 2.13 – Создание метода ComicBook
	Как показано на рисунке 2.14, был создан метод ComicChapter, принимающий на вход id главы и также являющийся действием. В нем создан экземпляр класса Chapter, которому присваивается глава с нужным id. Таким же образом находится комикс по этой главе и присваиваются главы. С помощью метода Count() подсчитывается количество глав, находится id первой главы и передается в представление. Затем с помощью LINQ-запроса этому экземпляру класса присваиваются нужные страницы и сортируются в порядке возрастания по номерам страниц. Метод возвращает представление, в которое передана модель текущей главы.

Рисунок 2.14 – Создание метода ComicChapter
	На рисунке 2.15 показано создание метода отправки отзыва. Атрибут [Authorize] перед объявлением метода означает, что вызвать его может только авторизированный пользователь, а [HttpPost] указывает, что метод обрабатывает тип запроса Post. На вход подаются три аргумента: id комикса, оценка и текст отзыва. Далее, если пользователь прошел аутентификацию, создается экземпляр класса User, которому присваивается текущий пользователь. Затем в базе данных ищется строка с нужными пользователем и комиксом. Если она не найдена, то создается новая, ей присваиваются оценка и текст отзыва. Если найдена, то эти же данные обновляются. С помощью метода SaveChanges() сохраняются изменения в базу данных.

Рисунок 2.15 – Создание метода SendReview
	Таким же образом создается метод для добавления в список для чтения и добавления в любимые в соответствии с рисунком 2.16.

Рисунок 2.16 – Создание метода AddStatus
	Создание контроллера аккаунта, как показано на рисунке 2.17, происходит аналогичным образом.

Рисунок 2.17 – Создание контроллера аккаунта
	Также были созданы модели для регистрации – RegisterModel и входа – LoginModel в соответствии с рисунками 2.18 и 2.19. 

Рисунок 2.18 – Модель для регистрации

Рисунок 2.19 – Модель для входа
	В методе Authenticate(), согласно рисунку 2.20, происходит аутентификация пользователя. В нем создается новый Claim, который ответственен за создание набора данных, их шифрование и добавление в куки. Далее вызывается метод SignInAsync, отправляющий пользователю куки, которые при дальнейших запросах будут поступать обратно на сервер и использоваться для аутентификации пользователя.


Рисунок 2.20 – Метод для аутентификации
	Далее был создан метод Login(), как показано на рисунке 2.20, который проверяет аутентифицирован ли пользователь. Если да, то происходит переход на страницу пользователя.

Рисунок 2.21 – Метод Login()
	На рисунке 2.21 показан метод Login(LoginModel model), который ответственен за вход пользователя. Если нужный пользователь найден, вызывается метод аутентификации и происходит переход на страницу пользователя. Иначе высвечивается ошибка: "Некорректные логин и(или) пароль".

Рисунок 2.22 – Метод Login(LoginModel model)
	В методе регистрации проверяется корректность введенных данных. Затем происходит поиск пользователя в базе данных по e-mail. Если таковой не найден, происходит добавление новых данных пользователя в базу, их сохранение и переход на страницу пользователя. Иначе выводится ошибка о некорректных данных.

Рисунок 2.23 – Метод регистрации
	На рисунке 2.24 отображен метод Logout(), отвечающий за выход пользователя из аккаунта.

Рисунок 2.24 – Метод выхода из аккаунта

2.4.    Создание представлений

Представления были созданы с помощью страниц Razor Pages, которые позволяют использовать код на C# внутри html-страниц. Здесь подключаются все нужные стили, шрифты и скрипты. Также здесь описана навигационная панель. Внутри тега «main» вызывается метод RenderBody(), который позволяет передать в него другие представления.


Рисунок 2.25 – Страница Layout

Представление Index, как показано на рисунках 2.26 и 2.27, отображает главную страницу, на которой имеется список комиксов, сортировка, строка и фильтры поиска. Для строки поиска используется тег «input» и кнопкой поиска из библиотеки «Font awesome». Для создания фильтра по жанрам и языкам был использован js-скрипт. Всего имеется 13 жанров: драма, фантастика, приключения, экшн, детектив, ужасы, триллер, трагедия, романтика, спорт, психология, повседневность и научная фантастика, а также 3 языка: русский, английский и японский.
Также представление Index реализует модель ComicBook. В цикле foreach, согласно рисунку 2.27, происходит перебор всех комиксов в базе данных и вывод названия и обложки каждого на экран. В атрибут «href» тега «a» передается нужный id и при нажатии на название или обложку происходит переход на страницу данного комикса.

Рисунок 2.26 – Представление Index

Рисунок 2.27 – Представление Index
	В представление ComicBook передается модель комикса. В цикле foreach, как показано на рисунке 2.28, вычисляется средняя оценка комикса. Затем с помощью тегов «img», «h5» и «p» значения средней оценки и количества отзывов выводятся на экран. Также с помощью тега «a» создаются кнопки «Добавить в любимые» и «Оставить отзыв», а с помощью «select» создается выпадающий список с возможностью выбрать одно из значений: «Хочу прочитать», «Читаю», «Прочитано».

Рисунок 2.28 – Представление ComicBook
	На рисунке 2.29 демонстрируется вывод на экран следующей информации о комиксе: обложка, название, год выхода, язык, авторы, жанры и описание. Данные поступают из переданной ранее модели.

Рисунок 2.28 – Представление ComicBook


	На рисунке 2.29 иллюстрируется создание модального окна, которое открывается при нажатии на кнопку «Оставить отзыв». В нем с помощью тега «form» создается форма с полями для оценки по пятибалльной шкале и текста отзыва. При нажатии на кнопку «Отправить» происходит вызов действия «SendReview» из контроллера «Home».

Рисунок 2.29 – Представление ComicBook
	На рисунке 2.30 показан вывод соответствующих глав и отзывов.

Рисунок 2.30 – Представление ComicBook
	Как демонстрируется на рисунке 2.31, был написан код на языке
JavaScript для обработки нажатия на кнопки «Главы» и «Отзывы». Сначала создаются переменные, которым присваиваются нужные элементы html-документа: блоки глав и отзывов, а также сами кнопки. Далее создаются функции, которые вызываются при нажатии на кнопки «Главы» и «Отзывы». В первом случае отображается блок с главами, а во втором – блок с отзывами. Также происходит смена цвета фона кнопок. 

Рисунок 2.31 – Код JavaScript для представления ComicBook
Аналогичным образом были написаны остальные представления.




2.5.    Распознавание изображений

Для распознавания текста с изображений был использован движок OCR Tesseract. Он имеет открытый исходный код и является наиболее популярной и качественной OCR-библиотекой. Также Tesseract использует нейронные сети для поиска и распознавания текста на изображениях.
Данный движок находит шаблоны в пикселях, буквах, словах и предложениях. Он использует двухэтапный подход, именуемый адаптивным распознаванием. Первый проход по данным нужен для распознавания символов, а второй проход – для заполнения букв, в которых он более уверен в соответствии контексту.
В настоящее время последней версией является Tesseract 5.0, основанная на нейросетях LSTM, которые и используются в данной работе.
Длинная цепь элементов краткосрочной памяти (англ. Long short-term memory; LSTM) — разновидность архитектуры рекуррентных нейронных сетей, предложенная в 1997 году Зеппом Хохрайтером и Юргеном Шмидхубером. Как и многие рекуррентные нейронные сети, сеть LSTM универсальна, поскольку при наличии достаточного количества элементов, она способна выполнять любые вычисления, на которые способен нормальный компьютер, что требует соответствующей матрицы весов. 

Рисунок 2.32 – Структура нейросети
LSTM-сеть, помимо других сетевых модулей, также содержит LSTM-модули. Они являются рекуррентными модулями сети и могут запоминать значения не только на короткий, но и на длинный период времени. Это происходит потому, что LSTM-модуль не использует функцию активации внутри своих рекуррентных компонентов. Поэтому значение, хранящееся в модуле, не размывается во времени, и градиент или штраф не исчезает при использовании метода обратного распространения ошибки во времени при обучении искусственной нейронной сети.
LSTM-блоки содержат три или четыре «вентиля», которые используются для контроля потоков информации на входах и на выходах памяти данных блоков. Эти вентили реализованы в виде логистической функции для вычисления значения в диапазоне [0; 1]. Умножение на это значение используется для частичного допуска или запрещения потока информации внутрь и наружу памяти. Например, «входной вентиль» контролирует меру вхождения нового значения в память, а «вентиль забывания» контролирует меру сохранения значения в памяти. «Выходной вентиль» контролирует меру того, в какой степени значение, находящееся в памяти, используется при расчёте выходной функции активации для блока. 
Веса в LSTM-блоке (W и U) используются для задания направления оперирования вентилей. Эти веса определены для значений, которые подаются в блок (включая xt и выход с предыдущего временного шага ht-1) для каждого из вентилей. Таким образом, LSTM-блок определяет, как распоряжаться своей памятью как функцией этих значений, и тренировка весов позволяет LSTM-блоку выучить функцию, минимизирующую потери. LSTM-блоки обычно тренируют при помощи метода обратного распространения ошибки во времени.



Традиционная LSTM с вентилями забывания c0 = 0 и h0 = 0 (∘ обозначает произведение Адамара):

Переменные:
•	xt — входной вектор,
•	ht — выходной вектор,
•	ct — вектор состояний,
•	W, U и b— матрицы параметров и вектор,
•	ft, it, и ot — векторы вентилей,
•	ft — вектор вентиля забывания, вес запоминания старой информации,
•	it — вектор входного вентиля, вес получения новой информации,
•	ot — вектор выходного вентиля, кандидат на выход.
Функции активации:
σg: на основе сигмоиды.
σc: на основе гиперболического тангенса.
σh: на основе гиперболического тангенса, но в работе о глазках (смотровых отверстиях) для LSTM предполагается, что σh(x) = x.
Для создания нейронной сети была использована нейросетевая библиотека EmguCV, предназначенная для работы на языке C#, как показано на рисунке 2.33.

Рисунок 2.33 – Подключение библиотеки
	В методе обработки нажатия на кнопку «Распознать текст» сначала проверяется наличие ошибок, в случае которых выбрасывается исключение. Если же ошибки не были найдены, создается новый объект Tesseract, который принимает на вход в качестве аргументов путь к обученным данным, язык текста и режим распознавания – в нашем случае это нейросеть LSTM. Затем экземпляру объекта Tesseract задается путь к выбранному изображению. Далее используется метод Recognize(), который выполняет распознавание текста. Распознанный текст выводится на экран, а после выполняется очистка экземпляра объекта Tesseract с помощью метода Dispose(). Ниже на рисунке 2.34 приведен код данного метода.

Рисунок 2.34 – Метод распознавания текста с изображения
	Для того, чтобы можно было распознать лишь часть изображения, выбранную пользователем, была использована библиотека JQuery и встроенный метод Jcrop, позволяющий выделить фрагмент изображения. На рисунке 2.35 и 2.36 показан код использования данного метода. В него передается функция showCoords, которая принимает значения координат выделенного фрагмента и передает их значения полям формы по id, как показано на рисунке 2.37.

Рисунок 2.35 – Использование метода Jcrop

Рисунок 2.36 – Использование метода Jcrop


Рисунок 2.37 – Создание формы для координат
Для обработки изображения по координатам внутри контроллера «Home» был создан метод CropImage(). Согласно рисунку 2.38, он принимает на вход координаты и id изображения. Далее он копирует это изображение в отдельную папку. Затем по имеющимся координатам создается экземпляр объекта Rectangle под названием CropArea и с помощью метода DrawImage происходит обрезка изображения по данному экземпляру. Файл сохраняется, и его путь передается на вход методу tesseract.SetImage() для дальнейшего распознавания. Полученный распознанный текст выводится на экран с помощью объекта ViewBag.

Рисунок 2.38 – Код метода CropImage()
 
ЗАКЛЮЧЕНИЕ

В результате выполнения выпускной квалификационной работы было разработано веб-приложение для чтения комиксов с возможностью распознавания текста с изображения. Были реализованы все задачи проводимого исследования. Была проанализирована предметная область, определены функциональные и нефункциональные требования к системе, построена карта информационной системы, созданы макеты приложения; разработаны и представлены клиентская и серверная части информационной системы. Также был разработан привлекательный и эффективный дизайн, соответствующий ожиданиям целевой аудитории. В процессе были использованы современные методы разработки сайта, а также инструменты последних версий, такие как ASP.NET Core 5, MS SQL Server, EntityFramework Core, HTML5, CSS3, JavaScript, OCR Tesseract и EmguCV. Полученное веб-приложение позволяет читать комиксы. Также сайт предполагает возможность регистрации пользователей, внесения изменений в личные данные, просмотр информации о комиксе, их оценивание и добавление в список для чтения. Система отвечает исходным требованиям по оперативности, достоверности, надежности и адекватности. 
Результаты исследования могут быть применены для облегчения получения пользователями актуальной информации о фильмах.
В процессе исследования были получены знания и сформированы навыки практической работы, связанной с разработкой и реализацией информационных систем.



